{"ast":null,"code":"import sha256 from 'crypto-js/sha256';\n\nvar CryptoJS = require(\"crypto-js\");\n\nexport default {\n  name: 'EncrypterFunctions',\n\n  data() {\n    return {\n      box1: null,\n      box2: null\n    };\n  },\n\n  props: {\n    msg: String\n  },\n  methods: {\n    //worked\n    CezarCrypt() {\n      let theText = this.box1;\n      let output = new String();\n      let Temp = new Array();\n      let Temp2 = new Array();\n      let TextSize = theText.length;\n\n      for (let i = 0; i < TextSize; i++) {\n        let rnd = Math.round(Math.random() * 122) + 68;\n        Temp[i] = theText.charCodeAt(i) + rnd;\n        Temp2[i] = rnd;\n      }\n\n      for (let i = 0; i < TextSize; i++) {\n        output += String.fromCharCode(Temp[i], Temp2[i]);\n      }\n\n      this.box2 = output;\n    },\n\n    //worked\n    CezarunUncrypt() {\n      let theText = this.box2;\n      let output = new String();\n      let Temp = new Array();\n      let Temp2 = new Array();\n      let TextSize = theText.length;\n\n      for (let i = 0; i < TextSize; i++) {\n        Temp[i] = theText.charCodeAt(i);\n        Temp2[i] = theText.charCodeAt(i + 1);\n      }\n\n      for (let i = 0; i < TextSize; i = i + 2) {\n        output += String.fromCharCode(Temp[i] - Temp2[i]);\n      }\n\n      this.box2 = output;\n    },\n\n    //worked\n    VernamCrypt() {\n      var theText = this.box1; // генератор случайных чисел в заданном диапазоне\n\n      function getRandomInt(min, max) {\n        return Math.floor(Math.random() * (max - min)) + min;\n      }\n\n      var input, output, key;\n      var inp, k;\n      input = theText;\n      key = prompt(\"Введите ключ и запишите его - он потребуется для расшифровки сообщения\"); // если длина ключа меньше длины сообщения — говорим пользователю и генерируем свой ключ\n\n      if (key.length < input.length) {\n        alert(\"Ключ короче сообщения, это небезопасно. Скопируйте новый сгенерированный ключ из консоли браузера.\");\n        key = \"\"; // генерируем новый ключ такой же длины, как и сообщение\n\n        for (var i = 0; i < input.length; i++) {\n          key += String.fromCharCode(getRandomInt(0, 66535));\n        }\n\n        console.log(\"Скопируйте новый ключ ↓\");\n        console.log(key);\n      }\n\n      output = \"\";\n\n      for (i = 0; i < input.length; i++) {\n        inp = input.charCodeAt(i);\n        k = key.charCodeAt(i);\n        output += String.fromCharCode(inp ^ k);\n      }\n\n      this.box2 = output;\n    },\n\n    //worked\n    AesCrypt() {\n      this.box2 = CryptoJS.AES.encrypt(this.box1, 'secret key').toString();\n    },\n\n    //worked\n    AesUncrypt() {\n      var bytes = CryptoJS.AES.decrypt(this.box2, 'secret key');\n      this.box2 = bytes.toString(CryptoJS.enc.Utf8);\n    },\n\n    //worked but useless :P TODO: do something with this donkey shit\n    sha256() {\n      this.box2 = sha256(this.box1);\n    },\n\n    //worked\n    DesCrypt() {\n      this.box2 = CryptoJS.DES.encrypt(this.box1, 'secret key').toString();\n    },\n\n    //worked\n    DesUncrypt() {\n      var bytes = CryptoJS.DES.decrypt(this.box2, 'secret key');\n      this.box2 = bytes.toString(CryptoJS.enc.Utf8);\n    },\n\n    //worked\n    TripleDESCrypt() {\n      this.box2 = CryptoJS.TripleDES.encrypt(this.box1, \"Secret Passphrase\").toString();\n    },\n\n    //worked\n    TripleDESUncrypt() {\n      var bytes = CryptoJS.TripleDES.decrypt(this.box2, \"Secret Passphrase\");\n      this.box2 = bytes.toString(CryptoJS.enc.Utf8);\n    }\n\n  }\n};","map":{"version":3,"mappings":"AAoFA;;AACA;;AAEA;EACAA,0BADA;;EAEAC;IACA;MACAC,UADA;MAEAC;IAFA;EAIA,CAPA;;EAQAC;IACAC;EADA,CARA;EAWAC;IACA;IACAC;MACA;MACA;MACA;MACA;MACA;;MACA;QACA;QACAC;QACAC;MACA;;MACA;QACAC;MACA;;MACA;IACA,CAjBA;;IAmBA;IACAC;MACA;MACA;MACA;MACA;MACA;;MACA;QACAH;QACAC;MACA;;MACA;QACAC;MACA;;MACA;IACA,CAlCA;;IAqCA;IACAE;MACA,wBADA,CAEA;;MACA;QACA;MACA;;MACA;MACA;MACAC;MAEAC,uFAVA,CAYA;;MACA;QACAC;QACAD,SAFA,CAGA;;QACA;UACAA;QACA;;QACAE;QACAA;MACA;;MACAN;;MACA;QACAO;QACAC;QACAR;MACA;;MACA;IACA,CApEA;;IAsEA;IACAS;MACA;IACA,CAzEA;;IA2EA;IACAC;MACA;MACA;IACA,CA/EA;;IAiFA;IACAC;MACA;IACA,CApFA;;IAsFA;IACAC;MACA;IACA,CAzFA;;IA2FA;IACAC;MACA;MACA;IACA,CA/FA;;IAiGA;IACAC;MACA;IACA,CApGA;;IAsGA;IACAC;MACA;MACA;IACA;;EA1GA;AAXA","names":["name","data","box1","box2","props","msg","methods","CezarCrypt","Temp","Temp2","output","CezarunUncrypt","VernamCrypt","input","key","alert","console","inp","k","AesCrypt","AesUncrypt","sha256","DesCrypt","DesUncrypt","TripleDESCrypt","TripleDESUncrypt"],"sourceRoot":"src/components","sources":["Encrypter.vue"],"sourcesContent":["<template>\r\n  <form name=\"encform\" onsubmit=\"return false;\">\r\n    <div class=\"main\">\r\n\r\n      <label for=\"exampleFormControlTextarea1\"\r\n             class=\"form-label\">\r\n        Исходные данные</label>\r\n      <textarea name=\"box1\"\r\n                v-model=\"box1\"\r\n                class=\"form-control\"\r\n                id=\"exampleFormControlTextarea1\"\r\n                placeholder=\"Введите текст для зашифровки/расшифровки...\"\r\n                rows=\"3\"></textarea>\r\n\r\n      <div class=\"cryptButtons\">\r\n        <button class=\"btn btn-primary\"\r\n                @click=\"sha256()\">\r\n          SHA256\r\n        </button>\r\n\r\n        <button class=\"btn btn-primary\"\r\n                @click=\"VernamCrypt()\">\r\n          Шифр Вернама\r\n        </button>\r\n\r\n        <button class=\"btn btn-primary\"\r\n                @click=\"CezarCrypt()\">\r\n          Шифр Цезаря\r\n        </button>\r\n      </div>\r\n\r\n\r\n      <div class=\"cryptButtonsMain\">\r\n        <button class=\"btn btn-primary\"\r\n                @click=\"AesCrypt()\">\r\n          AES\r\n        </button>\r\n        <button class=\"btn btn-primary\"\r\n                @click=\"DesCrypt()\">\r\n          DES\r\n        </button>\r\n        <button class=\"btn btn-primary\"\r\n                @click=\"TripleDESCrypt()\">\r\n          Triple DES\r\n        </button>\r\n      </div>\r\n\r\n\r\n      <label for=\"exampleFormControlTextarea2\"\r\n             class=\"form-label\">\r\n        Результат программы</label>\r\n      <textarea name=\"box2\"\r\n                class=\"form-control\"\r\n                v-model=\"box2\"\r\n                id=\"exampleFormControlTextarea2\"\r\n                rows=\"3\"\r\n                placeholder=\"Данные после шифрации/дешифрации\"></textarea>\r\n\r\n\r\n      <div class=\"unCryptButtons\">\r\n        <button class=\"btn btn-primary\"\r\n                @click=\"CezarunUncrypt()\">\r\n          Расшифровать шифр Цезаря\r\n        </button>\r\n        <button class=\"btn btn-primary\"\r\n                @click=\"AesUncrypt()\">\r\n          Расшифровать AES\r\n        </button>\r\n        <button class=\"btn btn-primary\"\r\n                @click=\"DesUncrypt()\">\r\n          Расшифровать DES\r\n        </button>\r\n        <button class=\"btn btn-primary\"\r\n                @click=\"TripleDESUncrypt()\">\r\n          Расшифровать Triple DES\r\n        </button>\r\n      </div>\r\n\r\n\r\n    </div>\r\n  </form>\r\n</template>\r\n\r\n<script>\r\nimport sha256 from 'crypto-js/sha256';\r\nvar CryptoJS = require(\"crypto-js\");\r\n\r\nexport default {\r\n  name: 'EncrypterFunctions',\r\n  data() {\r\n    return {\r\n      box1: null,\r\n      box2: null\r\n    }\r\n  },\r\n  props: {\r\n    msg: String\r\n  },\r\n  methods: {\r\n         //worked\r\n       CezarCrypt() {\r\n         let theText = this.box1\r\n         let output  = new String;\r\n         let Temp    = new Array();\r\n         let Temp2   = new Array();\r\n         let TextSize = theText.length;\r\n        for (let i = 0; i < TextSize; i++) {\r\n          let rnd = Math.round(Math.random() * 122) + 68;\r\n          Temp[i] = theText.charCodeAt(i) + rnd;\r\n          Temp2[i] = rnd;\r\n        }\r\n        for (let i = 0; i < TextSize; i++) {\r\n          output += String.fromCharCode(Temp[i], Temp2[i]);\r\n        }\r\n        this.box2 = output;\r\n      },\r\n\r\n        //worked\r\n       CezarunUncrypt() {\r\n        let theText = this.box2\r\n        let output  = new String;\r\n        let Temp    = new Array();\r\n        let Temp2   = new Array();\r\n        let TextSize = theText.length;\r\n        for (let i = 0; i < TextSize; i++) {\r\n          Temp[i] = theText.charCodeAt(i);\r\n          Temp2[i] = theText.charCodeAt(i + 1);\r\n        }\r\n        for (let i = 0; i < TextSize; i = i+2) {\r\n          output += String.fromCharCode(Temp[i] - Temp2[i]);\r\n        }\r\n        this.box2 = output;\r\n      },\r\n\r\n\r\n      //worked\r\n       VernamCrypt() {\r\n         var theText = this.box1\r\n        // генератор случайных чисел в заданном диапазоне\r\n        function getRandomInt(min, max) {\r\n          return Math.floor(Math.random() * (max - min)) + min;\r\n        }\r\n        var input, output, key;\r\n        var inp, k;\r\n        input = theText\r\n\r\n        key = prompt(\"Введите ключ и запишите его - он потребуется для расшифровки сообщения\");\r\n\r\n        // если длина ключа меньше длины сообщения — говорим пользователю и генерируем свой ключ\r\n        if ((key.length) < (input.length)) {\r\n          alert(\"Ключ короче сообщения, это небезопасно. Скопируйте новый сгенерированный ключ из консоли браузера.\");\r\n          key = \"\";\r\n          // генерируем новый ключ такой же длины, как и сообщение\r\n          for (var i = 0; i < input.length; i++) {\r\n            key += String.fromCharCode(getRandomInt(0, 66535));\r\n          }\r\n          console.log(\"Скопируйте новый ключ ↓\");\r\n          console.log(key);\r\n        }\r\n        output = \"\";\r\n        for (i = 0; i < input.length; i++) {\r\n          inp = input.charCodeAt(i);\r\n          k = key.charCodeAt(i);\r\n          output += String.fromCharCode(inp ^ k);\r\n        }\r\n        this.box2 = output;\r\n      },\r\n\r\n    //worked\r\n      AesCrypt() {\r\n        this.box2 = CryptoJS.AES.encrypt(this.box1, 'secret key').toString()\r\n      },\r\n\r\n     //worked\r\n      AesUncrypt() {\r\n        var bytes  = CryptoJS.AES.decrypt(this.box2, 'secret key');\r\n        this.box2 = bytes.toString(CryptoJS.enc.Utf8);\r\n      },\r\n\r\n      //worked but useless :P TODO: do something with this donkey shit\r\n      sha256() {\r\n         this.box2 = sha256(this.box1)\r\n      },\r\n\r\n      //worked\r\n      DesCrypt() {\r\n         this.box2 = CryptoJS.DES.encrypt(this.box1, 'secret key').toString();\r\n      },\r\n\r\n      //worked\r\n      DesUncrypt() {\r\n        var bytes = CryptoJS.DES.decrypt(this.box2, 'secret key');\r\n        this.box2 = bytes.toString(CryptoJS.enc.Utf8);\r\n      },\r\n\r\n      //worked\r\n      TripleDESCrypt() {\r\n        this.box2 = CryptoJS.TripleDES.encrypt(this.box1, \"Secret Passphrase\").toString();\r\n      },\r\n\r\n      //worked\r\n      TripleDESUncrypt() {\r\n        var bytes = CryptoJS.TripleDES.decrypt(this.box2, \"Secret Passphrase\");\r\n        this.box2 = bytes.toString(CryptoJS.enc.Utf8)\r\n      }\r\n\r\n  }\r\n}\r\n</script>\r\n\r\n\r\n<style scoped lang=\"scss\">\r\n\r\n.cryptButtons {\r\n  box-sizing: border-box;\r\n  padding: 20px;\r\n}\r\n\r\n.cryptButtonsMain {\r\n  box-sizing: border-box;\r\n  padding: 0px;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.unCryptButtons {\r\n  box-sizing: border-box;\r\n  padding: 20px;\r\n}\r\n</style>\r\n"]},"metadata":{},"sourceType":"module"}