{"ast":null,"code":"/*!Copyright (c) 2009-2015 pidder, https://www.pidder.de\t\t\t\t\t\t\t\t\t\t\t*/\n// This program is free software; you can redistribute it and/or\n// modify it under the terms of the GNU General Public License as\n// published by the Free Software Foundation; either version 2 of the\n// License, or (at your option) any later version.\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n// General Public License for more details.\n// You should have received a copy of the GNU General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n// 02111-1307 USA or check at http://www.gnu.org/licenses/gpl.html\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\n/* pidCrypt is pidders JavaScript Crypto Library - https://www.pidder.de/pidcrypt\n * Version 0.06, 01/2015\n *\n * pidCrypt is a combination of different JavaScript functions for client side\n * encryption technologies with enhancements for openssl compatibility cast into\n * a modular class concept.\n *\n * Client side encryption is a must have for developing host proof applications:\n * There must be no knowledge of the clear text data at the server side, all\n * data is enrycpted prior to being submitted to the server.\n * Client side encryption is mandatory for protecting the privacy of the users.\n * \"Dont't trust us, check our source code!\"\n *\n * \"As a cryptography and computer security expert, I have never understood\n * the current fuss about the open source software movement. In the\n * cryptography world, we consider open source necessary for good security;\n * we have for decades. Public security is always more secure than proprietary\n * security. It's true for cryptographic algorithms, security protocols, and\n * security source code. For us, open source isn't just a business model;\n * it's smart engineering practice.\"\n * Bruce Schneier, Crypto-Gram 1999/09/15\n * copied form keepassx site - keepassx is a cross plattform password manager\n *\n * pidCrypt comes with modules under different licenses and copyright terms.\n * Make sure that you read and respect the individual module license conditions\n * before using it.\n *\n * The pidCrypt base library contains:\n * 1. pidcrypt.js\n *    class pidCrypt: the base class of the library\n * 2. pidcrypt_util.js\n *    base64 en-/decoding as new methods of the JavaScript String class\n *    UTF8 en-/decoding as new methods of the JavaScript String class\n *    String/HexString conversions as new methods of the JavaScript String class\n *\n * The pidCrypt modules and the original authors (see files for detailed\n * copyright and license terms) are:\n *\n * - md5.js:      \tMD5 (Message-Digest Algorithm), www.webtoolkit.info\n * - aes_core.js: \tAES (Advanced Encryption Standard ) Core algorithm, B. Poettering\n * - aes-ctr.js:  \tAES CTR (Counter) Mode, Chis Veness\n * - aes-cbc.js:  \tAES CBC (Cipher Block Chaining) Mode, pidder\n * - jsbn.js:     \tBigInteger for JavaScript, Tom Wu\n * - prng.js:     \tPRNG (Pseudo-Random Number Generator), Tom Wu\n * - rng.js:      \tRandom Numbers, Tom Wu\n * - rsa.js:      \tRSA (Rivest, Shamir, Adleman Algorithm), Tom Wu\n * - oids.js:     \toids (Object Identifiers found in ASN.1), Peter Gutmann\n * - asn1.js:     \tASN1 (Abstract Syntax Notation One) parser, Lapo Luchini\n * - sha256.js    \tSHA-256 hashing, Angel Marin \n * - sha2.js:     \tSHA-384 and SHA-512 hashing, Brian Turek\n * - seedrandom.js\tseeded random number generator, David Bau\n *\n * IMPORTANT:\n * Please report any bugs at https://sourceforge.net/projects/pidcrypt/\n * Vist https://www.pidder.de/pidcrypt for online demo and documentation\n */\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\nvar pidCryptUtil = require('./pidcrypt_util.js');\n\nfunction pidCrypt() {\n  function getRandomBytes(len) {\n    /* for better randomness make sure you incorporate and initiate seedrandom.js \n    *  before using getRandomBytes() or any call of Math.random()\n    */\n    if (!len) len = 8;\n    var bytes = new Array(len);\n    var field = [];\n\n    for (var i = 0; i < 256; i++) field[i] = i;\n\n    for (i = 0; i < bytes.length; i++) bytes[i] = field[Math.floor(Math.random() * field.length)];\n\n    return bytes;\n  }\n\n  this.setDefaults = function () {\n    this.params.nBits = 256; //salt should always be a Hex String e.g. AD0E76FF6535AD...\n\n    this.params.salt = pidCryptUtil.convertToHex(pidCryptUtil.byteArray2String(getRandomBytes(8)));\n    this.params.blockSize = 16;\n    this.params.UTF8 = true;\n    this.params.A0_PAD = true;\n  };\n\n  this.debug = true;\n  this.params = {}; //setting default values for params\n\n  this.params.dataIn = '';\n  this.params.dataOut = '';\n  this.params.decryptIn = '';\n  this.params.decryptOut = '';\n  this.params.encryptIn = '';\n  this.params.encryptOut = ''; //key should always be a Hex String e.g. AD0E76FF6535AD...\n\n  this.params.key = ''; //iv should always be a Hex String e.g. AD0E76FF6535AD...\n\n  this.params.iv = '';\n  this.params.clear = true;\n  this.setDefaults();\n  this.errors = '';\n  this.warnings = '';\n  this.infos = '';\n  this.debugMsg = ''; //set and get methods for base class\n\n  this.setParams = function (pObj) {\n    if (!pObj) pObj = {};\n\n    for (var p in pObj) this.params[p] = pObj[p];\n  };\n\n  this.getParams = function () {\n    return this.params;\n  };\n\n  this.getParam = function (p) {\n    return this.params[p] || '';\n  };\n\n  this.clearParams = function () {\n    this.params = {};\n  };\n\n  this.getNBits = function () {\n    return this.params.nBits;\n  };\n\n  this.getOutput = function () {\n    return this.params.dataOut;\n  };\n\n  this.setError = function (str) {\n    this.error = str;\n  };\n\n  this.appendError = function (str) {\n    this.errors += str;\n    return '';\n  };\n\n  this.getErrors = function () {\n    return this.errors;\n  };\n\n  this.isError = function () {\n    if (this.errors.length > 0) return true;\n    return false;\n  };\n\n  this.appendInfo = function (str) {\n    this.infos += str;\n    return '';\n  };\n\n  this.getInfos = function () {\n    return this.infos;\n  };\n\n  this.setDebug = function (flag) {\n    this.debug = flag;\n  };\n\n  this.appendDebug = function (str) {\n    this.debugMsg += str;\n    return '';\n  };\n\n  this.isDebug = function () {\n    return this.debug;\n  };\n\n  this.getAllMessages = function (options) {\n    var defaults = {\n      lf: '\\n',\n      clr_mes: false,\n      verbose: 15 //verbose level bits = 1111\n\n    };\n    if (!options) options = defaults;\n\n    for (var d in defaults) if (typeof options[d] == 'undefined') options[d] = defaults[d];\n\n    var mes = '';\n    var tmp = '';\n\n    for (var p in this.params) {\n      switch (p) {\n        case 'encryptOut':\n          tmp = this.params[p].toString().toByteArray();\n          tmp = tmp.join().fragment(64, options.lf);\n          break;\n\n        case 'key':\n        case 'iv':\n          tmp = this.params[p].formatHex(48);\n          break;\n\n        default:\n          tmp = this.params[p].toString().fragment(64, options.lf);\n      }\n\n      mes += '<p><b>' + p + '</b>:<pre>' + tmp + '</pre></p>';\n    }\n\n    if (this.debug) mes += 'debug: ' + this.debug + options.lf;\n    if (this.errors.length > 0 && (options.verbose & 1) == 1) mes += 'Errors:' + options.lf + this.errors + options.lf;\n    if (this.warnings.length > 0 && (options.verbose & 2) == 2) mes += 'Warnings:' + options.lf + this.warnings + options.lf;\n    if (this.infos.length > 0 && (options.verbose & 4) == 4) mes += 'Infos:' + options.lf + this.infos + options.lf;\n    if (this.debug && (options.verbose & 8) == 8) mes += 'Debug messages:' + options.lf + this.debugMsg + options.lf;\n    if (options.clr_mes) this.errors = this.infos = this.warnings = this.debug = '';\n    return mes;\n  };\n\n  this.getRandomBytes = function (len) {\n    return getRandomBytes(len);\n  }; //TODO warnings\n\n}\n\nmodule.exports = pidCrypt;","map":{"version":3,"names":["pidCryptUtil","require","pidCrypt","getRandomBytes","len","bytes","Array","field","i","length","Math","floor","random","setDefaults","params","nBits","salt","convertToHex","byteArray2String","blockSize","UTF8","A0_PAD","debug","dataIn","dataOut","decryptIn","decryptOut","encryptIn","encryptOut","key","iv","clear","errors","warnings","infos","debugMsg","setParams","pObj","p","getParams","getParam","clearParams","getNBits","getOutput","setError","str","error","appendError","getErrors","isError","appendInfo","getInfos","setDebug","flag","appendDebug","isDebug","getAllMessages","options","defaults","lf","clr_mes","verbose","d","mes","tmp","toString","toByteArray","join","fragment","formatHex","module","exports"],"sources":["C:/Users/kirill/Desktop/vksitproject/node_modules/pidcrypt/pidcrypt.js"],"sourcesContent":["/*!Copyright (c) 2009-2015 pidder, https://www.pidder.de\t\t\t\t\t\t\t\t\t\t\t*/\n// This program is free software; you can redistribute it and/or\n// modify it under the terms of the GNU General Public License as\n// published by the Free Software Foundation; either version 2 of the\n// License, or (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n// General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n// 02111-1307 USA or check at http://www.gnu.org/licenses/gpl.html\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/* pidCrypt is pidders JavaScript Crypto Library - https://www.pidder.de/pidcrypt\n * Version 0.06, 01/2015\n *\n * pidCrypt is a combination of different JavaScript functions for client side\n * encryption technologies with enhancements for openssl compatibility cast into\n * a modular class concept.\n *\n * Client side encryption is a must have for developing host proof applications:\n * There must be no knowledge of the clear text data at the server side, all\n * data is enrycpted prior to being submitted to the server.\n * Client side encryption is mandatory for protecting the privacy of the users.\n * \"Dont't trust us, check our source code!\"\n *\n * \"As a cryptography and computer security expert, I have never understood\n * the current fuss about the open source software movement. In the\n * cryptography world, we consider open source necessary for good security;\n * we have for decades. Public security is always more secure than proprietary\n * security. It's true for cryptographic algorithms, security protocols, and\n * security source code. For us, open source isn't just a business model;\n * it's smart engineering practice.\"\n * Bruce Schneier, Crypto-Gram 1999/09/15\n * copied form keepassx site - keepassx is a cross plattform password manager\n *\n * pidCrypt comes with modules under different licenses and copyright terms.\n * Make sure that you read and respect the individual module license conditions\n * before using it.\n *\n * The pidCrypt base library contains:\n * 1. pidcrypt.js\n *    class pidCrypt: the base class of the library\n * 2. pidcrypt_util.js\n *    base64 en-/decoding as new methods of the JavaScript String class\n *    UTF8 en-/decoding as new methods of the JavaScript String class\n *    String/HexString conversions as new methods of the JavaScript String class\n *\n * The pidCrypt modules and the original authors (see files for detailed\n * copyright and license terms) are:\n *\n * - md5.js:      \tMD5 (Message-Digest Algorithm), www.webtoolkit.info\n * - aes_core.js: \tAES (Advanced Encryption Standard ) Core algorithm, B. Poettering\n * - aes-ctr.js:  \tAES CTR (Counter) Mode, Chis Veness\n * - aes-cbc.js:  \tAES CBC (Cipher Block Chaining) Mode, pidder\n * - jsbn.js:     \tBigInteger for JavaScript, Tom Wu\n * - prng.js:     \tPRNG (Pseudo-Random Number Generator), Tom Wu\n * - rng.js:      \tRandom Numbers, Tom Wu\n * - rsa.js:      \tRSA (Rivest, Shamir, Adleman Algorithm), Tom Wu\n * - oids.js:     \toids (Object Identifiers found in ASN.1), Peter Gutmann\n * - asn1.js:     \tASN1 (Abstract Syntax Notation One) parser, Lapo Luchini\n * - sha256.js    \tSHA-256 hashing, Angel Marin \n * - sha2.js:     \tSHA-384 and SHA-512 hashing, Brian Turek\n * - seedrandom.js\tseeded random number generator, David Bau\n *\n * IMPORTANT:\n * Please report any bugs at https://sourceforge.net/projects/pidcrypt/\n * Vist https://www.pidder.de/pidcrypt for online demo and documentation\n */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar pidCryptUtil = require('./pidcrypt_util.js');\n\nfunction pidCrypt(){\n  function getRandomBytes(len){\n/* for better randomness make sure you incorporate and initiate seedrandom.js \n*  before using getRandomBytes() or any call of Math.random()\n*/  \n    if(!len) len = 8;\n    var bytes = new Array(len);\n    var field = [];\n    for(var i=0;i<256;i++) field[i] = i;\n    for(i=0;i<bytes.length;i++)\n      bytes[i] = field[Math.floor(Math.random()*field.length)];\n    return bytes\n  }\n\n  this.setDefaults = function(){\n     this.params.nBits = 256;\n  //salt should always be a Hex String e.g. AD0E76FF6535AD...\n     this.params.salt = pidCryptUtil.convertToHex(pidCryptUtil.byteArray2String(getRandomBytes(8)));\n     this.params.blockSize = 16;\n     this.params.UTF8 = true;\n     this.params.A0_PAD = true;\n  }\n\n  this.debug = true;\n  this.params = {};\n  //setting default values for params\n  this.params.dataIn = '';\n  this.params.dataOut = '';\n  this.params.decryptIn = '';\n  this.params.decryptOut = '';\n  this.params.encryptIn = '';\n  this.params.encryptOut = '';\n  //key should always be a Hex String e.g. AD0E76FF6535AD...\n  this.params.key = '';\n  //iv should always be a Hex String e.g. AD0E76FF6535AD...\n  this.params.iv = '';\n  this.params.clear = true;\n  this.setDefaults();\n  this.errors = '';\n  this.warnings = '';\n  this.infos = '';\n  this.debugMsg = '';\n  //set and get methods for base class\n  this.setParams = function(pObj){\n    if(!pObj) pObj = {};\n    for(var p in pObj)\n      this.params[p] = pObj[p];\n  }\n  this.getParams = function(){\n    return this.params;\n  }\n  this.getParam = function(p){\n    return this.params[p] || '';\n  }\n  this.clearParams = function(){\n      this.params= {};\n  }\n  this.getNBits = function(){\n    return this.params.nBits;\n  }\n  this.getOutput = function(){\n    return this.params.dataOut;\n  }\n  this.setError = function(str){\n    this.error = str;\n  }\n  this.appendError = function(str){\n    this.errors += str;\n    return '';\n  }\n  this.getErrors = function(){\n    return this.errors;\n  }\n  this.isError = function(){\n    if(this.errors.length>0)\n      return true;\n    return false\n  }\n  this.appendInfo = function(str){\n    this.infos += str;\n    return '';\n  }\n  this.getInfos = function()\n  {\n    return this.infos;\n  }\n  this.setDebug = function(flag){\n    this.debug = flag;\n  }\n  this.appendDebug = function(str)\n  {\n    this.debugMsg += str;\n    return '';\n  }\n  this.isDebug = function(){\n    return this.debug;\n  }\n  this.getAllMessages = function(options){\n    var defaults = {lf:'\\n',\n                    clr_mes: false,\n                    verbose: 15//verbose level bits = 1111\n        };\n    if(!options) options = defaults;\n    for(var d in defaults)\n      if(typeof(options[d]) == 'undefined') options[d] = defaults[d];\n    var mes = '';\n    var tmp = '';\n    for(var p in this.params){\n      switch(p){\n        case 'encryptOut':\n          tmp = this.params[p].toString().toByteArray();\n          tmp = tmp.join().fragment(64, options.lf)\n          break;\n        case 'key': \n        case 'iv':\n          tmp = this.params[p].formatHex(48);\n          break;\n        default:\n          tmp = this.params[p].toString().fragment(64, options.lf);\n      }  \n      mes += '<p><b>'+p+'</b>:<pre>' + tmp + '</pre></p>';\n    }  \n    if(this.debug) mes += 'debug: ' + this.debug + options.lf;\n    if(this.errors.length>0 && ((options.verbose & 1) == 1)) mes += 'Errors:' + options.lf + this.errors + options.lf;\n    if(this.warnings.length>0 && ((options.verbose & 2) == 2)) mes += 'Warnings:' +options.lf + this.warnings + options.lf;\n    if(this.infos.length>0 && ((options.verbose & 4) == 4)) mes += 'Infos:' +options.lf+ this.infos + options.lf;\n    if(this.debug && ((options.verbose & 8) == 8)) mes += 'Debug messages:' +options.lf+ this.debugMsg + options.lf;\n    if(options.clr_mes)\n      this.errors = this.infos = this.warnings = this.debug = '';\n    return mes;\n  }\n  this.getRandomBytes = function(len){\n    return getRandomBytes(len);\n  }\n  //TODO warnings\n}\n\nmodule.exports = pidCrypt;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AAEA,IAAIA,YAAY,GAAGC,OAAO,CAAC,oBAAD,CAA1B;;AAEA,SAASC,QAAT,GAAmB;EACjB,SAASC,cAAT,CAAwBC,GAAxB,EAA4B;IAC9B;AACA;AACA;IACI,IAAG,CAACA,GAAJ,EAASA,GAAG,GAAG,CAAN;IACT,IAAIC,KAAK,GAAG,IAAIC,KAAJ,CAAUF,GAAV,CAAZ;IACA,IAAIG,KAAK,GAAG,EAAZ;;IACA,KAAI,IAAIC,CAAC,GAAC,CAAV,EAAYA,CAAC,GAAC,GAAd,EAAkBA,CAAC,EAAnB,EAAuBD,KAAK,CAACC,CAAD,CAAL,GAAWA,CAAX;;IACvB,KAAIA,CAAC,GAAC,CAAN,EAAQA,CAAC,GAACH,KAAK,CAACI,MAAhB,EAAuBD,CAAC,EAAxB,EACEH,KAAK,CAACG,CAAD,CAAL,GAAWD,KAAK,CAACG,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAcL,KAAK,CAACE,MAA/B,CAAD,CAAhB;;IACF,OAAOJ,KAAP;EACD;;EAED,KAAKQ,WAAL,GAAmB,YAAU;IAC1B,KAAKC,MAAL,CAAYC,KAAZ,GAAoB,GAApB,CAD0B,CAE7B;;IACG,KAAKD,MAAL,CAAYE,IAAZ,GAAmBhB,YAAY,CAACiB,YAAb,CAA0BjB,YAAY,CAACkB,gBAAb,CAA8Bf,cAAc,CAAC,CAAD,CAA5C,CAA1B,CAAnB;IACA,KAAKW,MAAL,CAAYK,SAAZ,GAAwB,EAAxB;IACA,KAAKL,MAAL,CAAYM,IAAZ,GAAmB,IAAnB;IACA,KAAKN,MAAL,CAAYO,MAAZ,GAAqB,IAArB;EACF,CAPD;;EASA,KAAKC,KAAL,GAAa,IAAb;EACA,KAAKR,MAAL,GAAc,EAAd,CAxBiB,CAyBjB;;EACA,KAAKA,MAAL,CAAYS,MAAZ,GAAqB,EAArB;EACA,KAAKT,MAAL,CAAYU,OAAZ,GAAsB,EAAtB;EACA,KAAKV,MAAL,CAAYW,SAAZ,GAAwB,EAAxB;EACA,KAAKX,MAAL,CAAYY,UAAZ,GAAyB,EAAzB;EACA,KAAKZ,MAAL,CAAYa,SAAZ,GAAwB,EAAxB;EACA,KAAKb,MAAL,CAAYc,UAAZ,GAAyB,EAAzB,CA/BiB,CAgCjB;;EACA,KAAKd,MAAL,CAAYe,GAAZ,GAAkB,EAAlB,CAjCiB,CAkCjB;;EACA,KAAKf,MAAL,CAAYgB,EAAZ,GAAiB,EAAjB;EACA,KAAKhB,MAAL,CAAYiB,KAAZ,GAAoB,IAApB;EACA,KAAKlB,WAAL;EACA,KAAKmB,MAAL,GAAc,EAAd;EACA,KAAKC,QAAL,GAAgB,EAAhB;EACA,KAAKC,KAAL,GAAa,EAAb;EACA,KAAKC,QAAL,GAAgB,EAAhB,CAzCiB,CA0CjB;;EACA,KAAKC,SAAL,GAAiB,UAASC,IAAT,EAAc;IAC7B,IAAG,CAACA,IAAJ,EAAUA,IAAI,GAAG,EAAP;;IACV,KAAI,IAAIC,CAAR,IAAaD,IAAb,EACE,KAAKvB,MAAL,CAAYwB,CAAZ,IAAiBD,IAAI,CAACC,CAAD,CAArB;EACH,CAJD;;EAKA,KAAKC,SAAL,GAAiB,YAAU;IACzB,OAAO,KAAKzB,MAAZ;EACD,CAFD;;EAGA,KAAK0B,QAAL,GAAgB,UAASF,CAAT,EAAW;IACzB,OAAO,KAAKxB,MAAL,CAAYwB,CAAZ,KAAkB,EAAzB;EACD,CAFD;;EAGA,KAAKG,WAAL,GAAmB,YAAU;IACzB,KAAK3B,MAAL,GAAa,EAAb;EACH,CAFD;;EAGA,KAAK4B,QAAL,GAAgB,YAAU;IACxB,OAAO,KAAK5B,MAAL,CAAYC,KAAnB;EACD,CAFD;;EAGA,KAAK4B,SAAL,GAAiB,YAAU;IACzB,OAAO,KAAK7B,MAAL,CAAYU,OAAnB;EACD,CAFD;;EAGA,KAAKoB,QAAL,GAAgB,UAASC,GAAT,EAAa;IAC3B,KAAKC,KAAL,GAAaD,GAAb;EACD,CAFD;;EAGA,KAAKE,WAAL,GAAmB,UAASF,GAAT,EAAa;IAC9B,KAAKb,MAAL,IAAea,GAAf;IACA,OAAO,EAAP;EACD,CAHD;;EAIA,KAAKG,SAAL,GAAiB,YAAU;IACzB,OAAO,KAAKhB,MAAZ;EACD,CAFD;;EAGA,KAAKiB,OAAL,GAAe,YAAU;IACvB,IAAG,KAAKjB,MAAL,CAAYvB,MAAZ,GAAmB,CAAtB,EACE,OAAO,IAAP;IACF,OAAO,KAAP;EACD,CAJD;;EAKA,KAAKyC,UAAL,GAAkB,UAASL,GAAT,EAAa;IAC7B,KAAKX,KAAL,IAAcW,GAAd;IACA,OAAO,EAAP;EACD,CAHD;;EAIA,KAAKM,QAAL,GAAgB,YAChB;IACE,OAAO,KAAKjB,KAAZ;EACD,CAHD;;EAIA,KAAKkB,QAAL,GAAgB,UAASC,IAAT,EAAc;IAC5B,KAAK/B,KAAL,GAAa+B,IAAb;EACD,CAFD;;EAGA,KAAKC,WAAL,GAAmB,UAAST,GAAT,EACnB;IACE,KAAKV,QAAL,IAAiBU,GAAjB;IACA,OAAO,EAAP;EACD,CAJD;;EAKA,KAAKU,OAAL,GAAe,YAAU;IACvB,OAAO,KAAKjC,KAAZ;EACD,CAFD;;EAGA,KAAKkC,cAAL,GAAsB,UAASC,OAAT,EAAiB;IACrC,IAAIC,QAAQ,GAAG;MAACC,EAAE,EAAC,IAAJ;MACCC,OAAO,EAAE,KADV;MAECC,OAAO,EAAE,EAFV,CAEY;;IAFZ,CAAf;IAIA,IAAG,CAACJ,OAAJ,EAAaA,OAAO,GAAGC,QAAV;;IACb,KAAI,IAAII,CAAR,IAAaJ,QAAb,EACE,IAAG,OAAOD,OAAO,CAACK,CAAD,CAAd,IAAsB,WAAzB,EAAsCL,OAAO,CAACK,CAAD,CAAP,GAAaJ,QAAQ,CAACI,CAAD,CAArB;;IACxC,IAAIC,GAAG,GAAG,EAAV;IACA,IAAIC,GAAG,GAAG,EAAV;;IACA,KAAI,IAAI1B,CAAR,IAAa,KAAKxB,MAAlB,EAAyB;MACvB,QAAOwB,CAAP;QACE,KAAK,YAAL;UACE0B,GAAG,GAAG,KAAKlD,MAAL,CAAYwB,CAAZ,EAAe2B,QAAf,GAA0BC,WAA1B,EAAN;UACAF,GAAG,GAAGA,GAAG,CAACG,IAAJ,GAAWC,QAAX,CAAoB,EAApB,EAAwBX,OAAO,CAACE,EAAhC,CAAN;UACA;;QACF,KAAK,KAAL;QACA,KAAK,IAAL;UACEK,GAAG,GAAG,KAAKlD,MAAL,CAAYwB,CAAZ,EAAe+B,SAAf,CAAyB,EAAzB,CAAN;UACA;;QACF;UACEL,GAAG,GAAG,KAAKlD,MAAL,CAAYwB,CAAZ,EAAe2B,QAAf,GAA0BG,QAA1B,CAAmC,EAAnC,EAAuCX,OAAO,CAACE,EAA/C,CAAN;MAVJ;;MAYAI,GAAG,IAAI,WAASzB,CAAT,GAAW,YAAX,GAA0B0B,GAA1B,GAAgC,YAAvC;IACD;;IACD,IAAG,KAAK1C,KAAR,EAAeyC,GAAG,IAAI,YAAY,KAAKzC,KAAjB,GAAyBmC,OAAO,CAACE,EAAxC;IACf,IAAG,KAAK3B,MAAL,CAAYvB,MAAZ,GAAmB,CAAnB,IAAyB,CAACgD,OAAO,CAACI,OAAR,GAAkB,CAAnB,KAAyB,CAArD,EAAyDE,GAAG,IAAI,YAAYN,OAAO,CAACE,EAApB,GAAyB,KAAK3B,MAA9B,GAAuCyB,OAAO,CAACE,EAAtD;IACzD,IAAG,KAAK1B,QAAL,CAAcxB,MAAd,GAAqB,CAArB,IAA2B,CAACgD,OAAO,CAACI,OAAR,GAAkB,CAAnB,KAAyB,CAAvD,EAA2DE,GAAG,IAAI,cAAaN,OAAO,CAACE,EAArB,GAA0B,KAAK1B,QAA/B,GAA0CwB,OAAO,CAACE,EAAzD;IAC3D,IAAG,KAAKzB,KAAL,CAAWzB,MAAX,GAAkB,CAAlB,IAAwB,CAACgD,OAAO,CAACI,OAAR,GAAkB,CAAnB,KAAyB,CAApD,EAAwDE,GAAG,IAAI,WAAUN,OAAO,CAACE,EAAlB,GAAsB,KAAKzB,KAA3B,GAAmCuB,OAAO,CAACE,EAAlD;IACxD,IAAG,KAAKrC,KAAL,IAAe,CAACmC,OAAO,CAACI,OAAR,GAAkB,CAAnB,KAAyB,CAA3C,EAA+CE,GAAG,IAAI,oBAAmBN,OAAO,CAACE,EAA3B,GAA+B,KAAKxB,QAApC,GAA+CsB,OAAO,CAACE,EAA9D;IAC/C,IAAGF,OAAO,CAACG,OAAX,EACE,KAAK5B,MAAL,GAAc,KAAKE,KAAL,GAAa,KAAKD,QAAL,GAAgB,KAAKX,KAAL,GAAa,EAAxD;IACF,OAAOyC,GAAP;EACD,CAjCD;;EAkCA,KAAK5D,cAAL,GAAsB,UAASC,GAAT,EAAa;IACjC,OAAOD,cAAc,CAACC,GAAD,CAArB;EACD,CAFD,CAnIiB,CAsIjB;;AACD;;AAEDkE,MAAM,CAACC,OAAP,GAAiBrE,QAAjB"},"metadata":{},"sourceType":"script"}