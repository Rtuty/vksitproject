{"ast":null,"code":"/*----------------------------------------------------------------------------*/\n// Copyright (c) 2009 pidder <www.pidder.com>\n// Permission to use, copy, modify, and/or distribute this software for any\n// purpose with or without fee is hereby granted, provided that the above\n// copyright notice and this permission notice appear in all copies.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n// WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n// MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n// ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n// WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n// ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n// OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n\n/*----------------------------------------------------------------------------*/\n\n/*  (c) Chris Veness 2005-2008\n* You are welcome to re-use these scripts [without any warranty express or\n* implied] provided you retain my copyright notice and when possible a link to\n* my website (under a LGPL license). Â§ection numbers relate the code back to\n* sections in the standard.\n/*----------------------------------------------------------------------------*/\n\n/* Helper methods (base64 conversion etc.) needed for different operations in\n * encryption.\n\n/*----------------------------------------------------------------------------*/\n\n/* Intance methods extanding the String object                                */\n\n/*----------------------------------------------------------------------------*/\n\n/**\n * Encode string into Base64, as defined by RFC 4648 [http://tools.ietf.org/html/rfc4648]\n * As per RFC 4648, no newlines are added.\n *\n * @param utf8encode optional parameter, if set to true Unicode string is\n *                   encoded into UTF-8 before conversion to base64;\n *                   otherwise string is assumed to be 8-bit characters\n * @return coded     base64-encoded string\n */\npidCryptUtil = {};\n\npidCryptUtil.encodeBase64 = function (str, utf8encode) {\n  // http://tools.ietf.org/html/rfc4648\n  if (!str) str = \"\";\n  var b64 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n  utf8encode = typeof utf8encode == 'undefined' ? false : utf8encode;\n  var o1,\n      o2,\n      o3,\n      bits,\n      h1,\n      h2,\n      h3,\n      h4,\n      e = [],\n      pad = '',\n      c,\n      plain,\n      coded;\n  plain = utf8encode ? pidCryptUtil.encodeUTF8(str) : str;\n  c = plain.length % 3; // pad string to length of multiple of 3\n\n  if (c > 0) {\n    while (c++ < 3) {\n      pad += '=';\n      plain += '\\0';\n    }\n  } // note: doing padding here saves us doing special-case packing for trailing 1 or 2 chars\n\n\n  for (c = 0; c < plain.length; c += 3) {\n    // pack three octets into four hexets\n    o1 = plain.charCodeAt(c);\n    o2 = plain.charCodeAt(c + 1);\n    o3 = plain.charCodeAt(c + 2);\n    bits = o1 << 16 | o2 << 8 | o3;\n    h1 = bits >> 18 & 0x3f;\n    h2 = bits >> 12 & 0x3f;\n    h3 = bits >> 6 & 0x3f;\n    h4 = bits & 0x3f; // use hextets to index into b64 string\n\n    e[c / 3] = b64.charAt(h1) + b64.charAt(h2) + b64.charAt(h3) + b64.charAt(h4);\n  }\n\n  coded = e.join(''); // join() is far faster than repeated string concatenation\n  // replace 'A's from padded nulls with '='s\n\n  coded = coded.slice(0, coded.length - pad.length) + pad;\n  return coded;\n};\n/**\n * Decode string from Base64, as defined by RFC 4648 [http://tools.ietf.org/html/rfc4648]\n * As per RFC 4648, newlines are not catered for.\n *\n * @param utf8decode optional parameter, if set to true UTF-8 string is decoded\n *                   back into Unicode after conversion from base64\n * @return           decoded string\n */\n\n\npidCryptUtil.decodeBase64 = function (str, utf8decode) {\n  if (!str) str = \"\";\n  var b64 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n  utf8decode = typeof utf8decode == 'undefined' ? false : utf8decode;\n  var o1,\n      o2,\n      o3,\n      h1,\n      h2,\n      h3,\n      h4,\n      bits,\n      d = [],\n      plain,\n      coded;\n  coded = utf8decode ? pidCryptUtil.decodeUTF8(str) : str;\n\n  for (var c = 0; c < coded.length; c += 4) {\n    // unpack four hexets into three octets\n    h1 = b64.indexOf(coded.charAt(c));\n    h2 = b64.indexOf(coded.charAt(c + 1));\n    h3 = b64.indexOf(coded.charAt(c + 2));\n    h4 = b64.indexOf(coded.charAt(c + 3));\n    bits = h1 << 18 | h2 << 12 | h3 << 6 | h4;\n    o1 = bits >>> 16 & 0xff;\n    o2 = bits >>> 8 & 0xff;\n    o3 = bits & 0xff;\n    d[c / 4] = String.fromCharCode(o1, o2, o3); // check for padding\n\n    if (h4 == 0x40) d[c / 4] = String.fromCharCode(o1, o2);\n    if (h3 == 0x40) d[c / 4] = String.fromCharCode(o1);\n  }\n\n  plain = d.join(''); // join() is far faster than repeated string concatenation\n\n  plain = utf8decode ? pidCryptUtil.decodeUTF8(plain) : plain;\n  return plain;\n};\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters\n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @return encoded string\n */\n\n\npidCryptUtil.encodeUTF8 = function (str) {\n  if (!str) str = \"\"; // use regular expressions & String.replace callback function for better efficiency\n  // than procedural approaches\n\n  str = str.replace(/[\\u0080-\\u07ff]/g, // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n  function (c) {\n    var cc = c.charCodeAt(0);\n    return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n  });\n  str = str.replace(/[\\u0800-\\uffff]/g, // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n  function (c) {\n    var cc = c.charCodeAt(0);\n    return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n  });\n  return str;\n}; // If you encounter problems with the UTF8 encode function (e.g. for use in a\n// Firefox) AddOn) you can use the following instead.\n// code from webtoolkit.com\n//pidCryptUtil.encodeUTF8 = function(str) {\n//\t\tstr = str.replace(/\\r\\n/g,\"\\n\");\n//\t\tvar utftext = \"\";\n//\n//\t\tfor (var n = 0; n < str.length; n++) {\n//\n//\t\t\tvar c = str.charCodeAt(n);\n//\n//\t\t\tif (c < 128) {\n//\t\t\t\tutftext += String.fromCharCode(c);\n//\t\t\t}\n//\t\t\telse if((c > 127) && (c < 2048)) {\n//\t\t\t\tutftext += String.fromCharCode((c >> 6) | 192);\n//\t\t\t\tutftext += String.fromCharCode((c & 63) | 128);\n//\t\t\t}\n//\t\t\telse {\n//\t\t\t\tutftext += String.fromCharCode((c >> 12) | 224);\n//\t\t\t\tutftext += String.fromCharCode(((c >> 6) & 63) | 128);\n//\t\t\t\tutftext += String.fromCharCode((c & 63) | 128);\n//\t\t\t}\n//\n//\t\t}\n//\n//  return utftext;\n//}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @return decoded string\n */\n\n\npidCryptUtil.decodeUTF8 = function (str) {\n  if (!str) str = \"\";\n  str = str.replace(/[\\u00c0-\\u00df][\\u0080-\\u00bf]/g, // 2-byte chars\n  function (c) {\n    // (note parentheses for precence)\n    var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n    return String.fromCharCode(cc);\n  });\n  str = str.replace(/[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g, // 3-byte chars\n  function (c) {\n    // (note parentheses for precence)\n    var cc = (c.charCodeAt(0) & 0x0f) << 12 | (c.charCodeAt(1) & 0x3f) << 6 | c.charCodeAt(2) & 0x3f;\n    return String.fromCharCode(cc);\n  });\n  return str;\n}; // If you encounter problems with the UTF8 decode function (e.g. for use in a\n// Firefox) AddOn) you can use the following instead.\n// code from webtoolkit.com\n//pidCryptUtil.decodeUTF8 = function(utftext) {\n//    var str = \"\";\n//\t\tvar i = 0;\n//\t\tvar c = 0;\n//    var c1 = 0;\n//    var c2 = 0;\n//\n//\t\twhile ( i < utftext.length ) {\n//\n//\t\t\tc = utftext.charCodeAt(i);\n//\n//\t\t\tif (c < 128) {\n//\t\t\t\tstr += String.fromCharCode(c);\n//\t\t\t\ti++;\n//\t\t\t}\n//\t\t\telse if((c > 191) && (c < 224)) {\n//\t\t\t\tc1 = utftext.charCodeAt(i+1);\n//\t\t\t\tstr += String.fromCharCode(((c & 31) << 6) | (c1 & 63));\n//\t\t\t\ti += 2;\n//\t\t\t}\n//\t\t\telse {\n//\t\t\t\tc1 = utftext.charCodeAt(i+1);\n//\t\t\t\tc2 = utftext.charCodeAt(i+2);\n//\t\t\t\tstr += String.fromCharCode(((c & 15) << 12) | ((c1 & 63) << 6) | (c2 & 63));\n//\t\t\t\ti += 3;\n//\t\t\t}\n//\n//\t\t}\n//\n//\n//  return str;\n//}\n\n/**\n * Converts a string into a hexadecimal string\n * returns the characters of a string to their hexadecimal charcode equivalent\n * Works only on byte chars with charcode < 256. All others chars are converted\n * into \"xx\"\n *\n * @return hex string e.g. \"hello world\" => \"68656c6c6f20776f726c64\"\n */\n\n\npidCryptUtil.convertToHex = function (str) {\n  if (!str) str = \"\";\n  var hs = '';\n  var hv = '';\n\n  for (var i = 0; i < str.length; i++) {\n    hv = str.charCodeAt(i).toString(16);\n    hs += hv.length == 1 ? '0' + hv : hv;\n  }\n\n  return hs;\n};\n/**\n * Converts a hex string into a string\n * returns the characters of a hex string to their char of charcode\n *\n * @return hex string e.g. \"68656c6c6f20776f726c64\" => \"hello world\"\n */\n\n\npidCryptUtil.convertFromHex = function (str) {\n  if (!str) str = \"\";\n  var s = \"\";\n\n  for (var i = 0; i < str.length; i += 2) {\n    s += String.fromCharCode(parseInt(str.substring(i, i + 2), 16));\n  }\n\n  return s;\n};\n/**\n * strips off all linefeeds from a string\n * returns the the strong without line feeds\n *\n * @return string\n */\n\n\npidCryptUtil.stripLineFeeds = function (str) {\n  if (!str) str = \"\"; //  var re = RegExp(String.fromCharCode(13),'g');//\\r\n  //  var re = RegExp(String.fromCharCode(10),'g');//\\n\n\n  var s = '';\n  s = str.replace(/\\n/g, '');\n  s = s.replace(/\\r/g, '');\n  return s;\n};\n/**\n * Converts a string into an array of char code bytes\n * returns the characters of a hex string to their char of charcode\n *\n * @return hex string e.g. \"68656c6c6f20776f726c64\" => \"hello world\"\n */\n\n\npidCryptUtil.toByteArray = function (str) {\n  if (!str) str = \"\";\n  var ba = [];\n\n  for (var i = 0; i < str.length; i++) ba[i] = str.charCodeAt(i);\n\n  return ba;\n};\n/**\n * Fragmentize a string into lines adding a line feed (lf) every length\n * characters\n *\n * @return string e.g. length=3 \"abcdefghi\" => \"abc\\ndef\\nghi\\n\"\n */\n\n\npidCryptUtil.fragment = function (str, length, lf) {\n  if (!str) str = \"\";\n  if (!length || length >= str.length) return str;\n  if (!lf) lf = '\\n';\n  var tmp = '';\n\n  for (var i = 0; i < str.length; i += length) tmp += str.substr(i, length) + lf;\n\n  return tmp;\n};\n/**\n * Formats a hex string in two lower case chars + : and lines of given length\n * characters\n *\n * @return string e.g. \"68656C6C6F20\" => \"68:65:6c:6c:6f:20:\\n\"\n*/\n\n\npidCryptUtil.formatHex = function (str, length) {\n  if (!str) str = \"\";\n  if (!length) length = 45;\n  var str_new = '';\n  var j = 0;\n  var hex = str.toLowerCase();\n\n  for (var i = 0; i < hex.length; i += 2) str_new += hex.substr(i, 2) + ':';\n\n  hex = this.fragment(str_new, length);\n  return hex;\n};\n/*----------------------------------------------------------------------------*/\n\n/* End of intance methods of the String object                                */\n\n/*----------------------------------------------------------------------------*/\n\n\npidCryptUtil.byteArray2String = function (b) {\n  //  var out ='';\n  var s = '';\n\n  for (var i = 0; i < b.length; i++) {\n    s += String.fromCharCode(b[i]); //     out += b[i]+':';\n  } //  alert(out);\n\n\n  return s;\n};\n\nmodule.exports = pidCryptUtil;","map":{"version":3,"names":["pidCryptUtil","encodeBase64","str","utf8encode","b64","o1","o2","o3","bits","h1","h2","h3","h4","e","pad","c","plain","coded","encodeUTF8","length","charCodeAt","charAt","join","slice","decodeBase64","utf8decode","d","decodeUTF8","indexOf","String","fromCharCode","replace","cc","convertToHex","hs","hv","i","toString","convertFromHex","s","parseInt","substring","stripLineFeeds","toByteArray","ba","fragment","lf","tmp","substr","formatHex","str_new","j","hex","toLowerCase","byteArray2String","b","module","exports"],"sources":["C:/Users/kirill/Desktop/vksitproject/node_modules/pidcrypt/pidcrypt_util.js"],"sourcesContent":[" /*----------------------------------------------------------------------------*/\n // Copyright (c) 2009 pidder <www.pidder.com>\n // Permission to use, copy, modify, and/or distribute this software for any\n // purpose with or without fee is hereby granted, provided that the above\n // copyright notice and this permission notice appear in all copies.\n //\n // THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n // WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n // MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n // ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n // WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n // ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n // OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n/*----------------------------------------------------------------------------*/\n/*  (c) Chris Veness 2005-2008\n* You are welcome to re-use these scripts [without any warranty express or\n* implied] provided you retain my copyright notice and when possible a link to\n* my website (under a LGPL license). Â§ection numbers relate the code back to\n* sections in the standard.\n/*----------------------------------------------------------------------------*/\n/* Helper methods (base64 conversion etc.) needed for different operations in\n * encryption.\n\n/*----------------------------------------------------------------------------*/\n/* Intance methods extanding the String object                                */\n/*----------------------------------------------------------------------------*/\n/**\n * Encode string into Base64, as defined by RFC 4648 [http://tools.ietf.org/html/rfc4648]\n * As per RFC 4648, no newlines are added.\n *\n * @param utf8encode optional parameter, if set to true Unicode string is\n *                   encoded into UTF-8 before conversion to base64;\n *                   otherwise string is assumed to be 8-bit characters\n * @return coded     base64-encoded string\n */\npidCryptUtil = {};\npidCryptUtil.encodeBase64 = function(str,utf8encode) {  // http://tools.ietf.org/html/rfc4648\n  if(!str) str = \"\";\n  var b64 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n  utf8encode =  (typeof utf8encode == 'undefined') ? false : utf8encode;\n  var o1, o2, o3, bits, h1, h2, h3, h4, e=[], pad = '', c, plain, coded;\n\n  plain = utf8encode ? pidCryptUtil.encodeUTF8(str) : str;\n\n  c = plain.length % 3;  // pad string to length of multiple of 3\n  if (c > 0) { while (c++ < 3) { pad += '='; plain += '\\0'; } }\n  // note: doing padding here saves us doing special-case packing for trailing 1 or 2 chars\n\n  for (c=0; c<plain.length; c+=3) {  // pack three octets into four hexets\n    o1 = plain.charCodeAt(c);\n    o2 = plain.charCodeAt(c+1);\n    o3 = plain.charCodeAt(c+2);\n\n    bits = o1<<16 | o2<<8 | o3;\n\n    h1 = bits>>18 & 0x3f;\n    h2 = bits>>12 & 0x3f;\n    h3 = bits>>6 & 0x3f;\n    h4 = bits & 0x3f;\n\n    // use hextets to index into b64 string\n    e[c/3] = b64.charAt(h1) + b64.charAt(h2) + b64.charAt(h3) + b64.charAt(h4);\n  }\n  coded = e.join('');  // join() is far faster than repeated string concatenation\n\n  // replace 'A's from padded nulls with '='s\n  coded = coded.slice(0, coded.length-pad.length) + pad;\n  return coded;\n}\n\n/**\n * Decode string from Base64, as defined by RFC 4648 [http://tools.ietf.org/html/rfc4648]\n * As per RFC 4648, newlines are not catered for.\n *\n * @param utf8decode optional parameter, if set to true UTF-8 string is decoded\n *                   back into Unicode after conversion from base64\n * @return           decoded string\n */\npidCryptUtil.decodeBase64 = function(str,utf8decode) {\n  if(!str) str = \"\";\n  var b64 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n  utf8decode =  (typeof utf8decode == 'undefined') ? false : utf8decode;\n  var o1, o2, o3, h1, h2, h3, h4, bits, d=[], plain, coded;\n\n  coded = utf8decode ? pidCryptUtil.decodeUTF8(str) : str;\n\n  for (var c=0; c<coded.length; c+=4) {  // unpack four hexets into three octets\n    h1 = b64.indexOf(coded.charAt(c));\n    h2 = b64.indexOf(coded.charAt(c+1));\n    h3 = b64.indexOf(coded.charAt(c+2));\n    h4 = b64.indexOf(coded.charAt(c+3));\n\n    bits = h1<<18 | h2<<12 | h3<<6 | h4;\n\n    o1 = bits>>>16 & 0xff;\n    o2 = bits>>>8 & 0xff;\n    o3 = bits & 0xff;\n\n    d[c/4] = String.fromCharCode(o1, o2, o3);\n    // check for padding\n    if (h4 == 0x40) d[c/4] = String.fromCharCode(o1, o2);\n    if (h3 == 0x40) d[c/4] = String.fromCharCode(o1);\n  }\n  plain = d.join('');  // join() is far faster than repeated string concatenation\n\n  plain = utf8decode ? pidCryptUtil.decodeUTF8(plain) : plain\n\n  return plain;\n}\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters\n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @return encoded string\n */\npidCryptUtil.encodeUTF8 = function(str) {\n  if(!str) str = \"\";\n  // use regular expressions & String.replace callback function for better efficiency\n  // than procedural approaches\n  str = str.replace(\n      /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n      function(c) {\n        var cc = c.charCodeAt(0);\n        return String.fromCharCode(0xc0 | cc>>6, 0x80 | cc&0x3f); }\n    );\n  str = str.replace(\n      /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n      function(c) {\n        var cc = c.charCodeAt(0);\n        return String.fromCharCode(0xe0 | cc>>12, 0x80 | cc>>6&0x3F, 0x80 | cc&0x3f); }\n    );\n  return str;\n}\n\n// If you encounter problems with the UTF8 encode function (e.g. for use in a\n// Firefox) AddOn) you can use the following instead.\n// code from webtoolkit.com\n\n//pidCryptUtil.encodeUTF8 = function(str) {\n//\t\tstr = str.replace(/\\r\\n/g,\"\\n\");\n//\t\tvar utftext = \"\";\n//\n//\t\tfor (var n = 0; n < str.length; n++) {\n//\n//\t\t\tvar c = str.charCodeAt(n);\n//\n//\t\t\tif (c < 128) {\n//\t\t\t\tutftext += String.fromCharCode(c);\n//\t\t\t}\n//\t\t\telse if((c > 127) && (c < 2048)) {\n//\t\t\t\tutftext += String.fromCharCode((c >> 6) | 192);\n//\t\t\t\tutftext += String.fromCharCode((c & 63) | 128);\n//\t\t\t}\n//\t\t\telse {\n//\t\t\t\tutftext += String.fromCharCode((c >> 12) | 224);\n//\t\t\t\tutftext += String.fromCharCode(((c >> 6) & 63) | 128);\n//\t\t\t\tutftext += String.fromCharCode((c & 63) | 128);\n//\t\t\t}\n//\n//\t\t}\n//\n//  return utftext;\n//}\n\n\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @return decoded string\n */\npidCryptUtil.decodeUTF8 = function(str) {\n  if(!str) str = \"\";\n  str = str.replace(\n      /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n      function(c) {  // (note parentheses for precence)\n        var cc = (c.charCodeAt(0)&0x1f)<<6 | c.charCodeAt(1)&0x3f;\n        return String.fromCharCode(cc); }\n    );\n  str = str.replace(\n      /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n      function(c) {  // (note parentheses for precence)\n        var cc = ((c.charCodeAt(0)&0x0f)<<12) | ((c.charCodeAt(1)&0x3f)<<6) | ( c.charCodeAt(2)&0x3f);\n        return String.fromCharCode(cc); }\n    );\n  return str;\n}\n\n// If you encounter problems with the UTF8 decode function (e.g. for use in a\n// Firefox) AddOn) you can use the following instead.\n// code from webtoolkit.com\n\n//pidCryptUtil.decodeUTF8 = function(utftext) {\n//    var str = \"\";\n//\t\tvar i = 0;\n//\t\tvar c = 0;\n//    var c1 = 0;\n//    var c2 = 0;\n//\n//\t\twhile ( i < utftext.length ) {\n//\n//\t\t\tc = utftext.charCodeAt(i);\n//\n//\t\t\tif (c < 128) {\n//\t\t\t\tstr += String.fromCharCode(c);\n//\t\t\t\ti++;\n//\t\t\t}\n//\t\t\telse if((c > 191) && (c < 224)) {\n//\t\t\t\tc1 = utftext.charCodeAt(i+1);\n//\t\t\t\tstr += String.fromCharCode(((c & 31) << 6) | (c1 & 63));\n//\t\t\t\ti += 2;\n//\t\t\t}\n//\t\t\telse {\n//\t\t\t\tc1 = utftext.charCodeAt(i+1);\n//\t\t\t\tc2 = utftext.charCodeAt(i+2);\n//\t\t\t\tstr += String.fromCharCode(((c & 15) << 12) | ((c1 & 63) << 6) | (c2 & 63));\n//\t\t\t\ti += 3;\n//\t\t\t}\n//\n//\t\t}\n//\n//\n//  return str;\n//}\n\n\n\n\n/**\n * Converts a string into a hexadecimal string\n * returns the characters of a string to their hexadecimal charcode equivalent\n * Works only on byte chars with charcode < 256. All others chars are converted\n * into \"xx\"\n *\n * @return hex string e.g. \"hello world\" => \"68656c6c6f20776f726c64\"\n */\npidCryptUtil.convertToHex = function(str) {\n  if(!str) str = \"\";\n  var hs ='';\n  var hv ='';\n  for (var i=0; i<str.length; i++) {\n    hv = str.charCodeAt(i).toString(16);\n    hs += (hv.length == 1) ? '0'+hv : hv;\n  }\n  return hs;\n}\n\n/**\n * Converts a hex string into a string\n * returns the characters of a hex string to their char of charcode\n *\n * @return hex string e.g. \"68656c6c6f20776f726c64\" => \"hello world\"\n */\npidCryptUtil.convertFromHex = function(str){\n  if(!str) str = \"\";\n  var s = \"\";\n  for(var i= 0;i<str.length;i+=2){\n    s += String.fromCharCode(parseInt(str.substring(i,i+2),16));\n  }\n  return s\n}\n\n/**\n * strips off all linefeeds from a string\n * returns the the strong without line feeds\n *\n * @return string\n */\npidCryptUtil.stripLineFeeds = function(str){\n  if(!str) str = \"\";\n//  var re = RegExp(String.fromCharCode(13),'g');//\\r\n//  var re = RegExp(String.fromCharCode(10),'g');//\\n\n  var s = '';\n  s = str.replace(/\\n/g,'');\n  s = s.replace(/\\r/g,'');\n  return s;\n}\n\n/**\n * Converts a string into an array of char code bytes\n * returns the characters of a hex string to their char of charcode\n *\n * @return hex string e.g. \"68656c6c6f20776f726c64\" => \"hello world\"\n */\n pidCryptUtil.toByteArray = function(str){\n  if(!str) str = \"\";\n  var ba = [];\n  for(var i=0;i<str.length;i++)\n     ba[i] = str.charCodeAt(i);\n\n  return ba;\n}\n\n\n/**\n * Fragmentize a string into lines adding a line feed (lf) every length\n * characters\n *\n * @return string e.g. length=3 \"abcdefghi\" => \"abc\\ndef\\nghi\\n\"\n */\npidCryptUtil.fragment = function(str,length,lf){\n  if(!str) str = \"\";\n  if(!length || length>=str.length) return str;\n  if(!lf) lf = '\\n'\n  var tmp='';\n  for(var i=0;i<str.length;i+=length)\n    tmp += str.substr(i,length) + lf;\n  return tmp;\n}\n\n/**\n * Formats a hex string in two lower case chars + : and lines of given length\n * characters\n *\n * @return string e.g. \"68656C6C6F20\" => \"68:65:6c:6c:6f:20:\\n\"\n*/\npidCryptUtil.formatHex = function(str,length){\n  if(!str) str = \"\";\n    if(!length) length = 45;\n    var str_new='';\n    var j = 0;\n    var hex = str.toLowerCase();\n    for(var i=0;i<hex.length;i+=2)\n      str_new += hex.substr(i,2) +':';\n    hex = this.fragment(str_new,length);\n\n  return hex;\n}\n\n\n/*----------------------------------------------------------------------------*/\n/* End of intance methods of the String object                                */\n/*----------------------------------------------------------------------------*/\n\npidCryptUtil.byteArray2String = function(b){\n//  var out ='';\n  var s = '';\n  for(var i=0;i<b.length;i++){\n     s += String.fromCharCode(b[i]);\n//     out += b[i]+':';\n  }\n//  alert(out);\n  return s;\n}\n\nmodule.exports = pidCryptUtil;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}