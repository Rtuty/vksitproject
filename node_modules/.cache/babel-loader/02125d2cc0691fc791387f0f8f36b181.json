{"ast":null,"code":"import sha256 from 'crypto-js/sha256';\nimport hmacSHA512 from 'crypto-js/hmac-sha512';\nimport Base64 from 'crypto-js/enc-base64';\nexport default {\n  name: 'EncrypterFunctions',\n\n  data() {\n    return {\n      box1: null,\n      box2: null\n    };\n  },\n\n  props: {\n    msg: String\n  },\n  methods: {\n    //worked\n    CezarEncrypt() {\n      let theText = this.box1;\n      let output = new String();\n      let Temp = new Array();\n      let Temp2 = new Array();\n      let TextSize = theText.length;\n\n      for (let i = 0; i < TextSize; i++) {\n        let rnd = Math.round(Math.random() * 122) + 68;\n        Temp[i] = theText.charCodeAt(i) + rnd;\n        Temp2[i] = rnd;\n      }\n\n      for (let i = 0; i < TextSize; i++) {\n        output += String.fromCharCode(Temp[i], Temp2[i]);\n      }\n\n      this.box2 = output;\n    },\n\n    //worked\n    CezarunEncrypt() {\n      let theText = this.box2;\n      let output = new String();\n      let Temp = new Array();\n      let Temp2 = new Array();\n      let TextSize = theText.length;\n\n      for (let i = 0; i < TextSize; i++) {\n        Temp[i] = theText.charCodeAt(i);\n        Temp2[i] = theText.charCodeAt(i + 1);\n      }\n\n      for (let i = 0; i < TextSize; i = i + 2) {\n        output += String.fromCharCode(Temp[i] - Temp2[i]);\n      }\n\n      this.box2 = output;\n    },\n\n    //worked\n    VernamCrypt() {\n      var theText = this.box1; // генератор случайных чисел в заданном диапазоне\n\n      function getRandomInt(min, max) {\n        return Math.floor(Math.random() * (max - min)) + min;\n      }\n\n      var input, output, key;\n      var inp, k;\n      input = theText;\n      key = prompt(\"Введите ключ и запишите его - он потребуется для расшифровки сообщения\"); // если длина ключа меньше длины сообщения — говорим пользователю и генерируем свой ключ\n\n      if (key.length < input.length) {\n        alert(\"Ключ короче сообщения, это небезопасно. Скопируйте новый сгенерированный ключ из консоли браузера.\");\n        key = \"\"; // генерируем новый ключ такой же длины, как и сообщение\n\n        for (var i = 0; i < input.length; i++) {\n          key += String.fromCharCode(getRandomInt(0, 66535));\n        }\n\n        console.log(\"Скопируйте новый ключ ↓\");\n        console.log(key);\n      } // чтобы расшифровать сообщение\n      // шифруем сообщение\n\n\n      output = \"\";\n\n      for (i = 0; i < input.length; i++) {\n        inp = input.charCodeAt(i);\n        k = key.charCodeAt(i);\n        output += String.fromCharCode(inp ^ k);\n      }\n\n      this.box2 = output;\n    },\n\n    //not worked\n    // AesCrypt() {\n    //   var theText = this.box1\n    //   var hex = theText.toString();\n    //   var str = '';\n    //   for (var i = 0; i < hex.length; i += 2)\n    //     str += String.fromCharCode(parseInt(hex.substr(i, 2), 16));\n    //   this.box2 = str;\n    // },\n    //\n    // AesEncrypt() {\n    //   var hex = this.box1;\n    //   for(var i = 0; i < str.length; i++) {\n    //     hex += str.charCodeAt(i).toString(16);\n    //   }\n    //   this.box2 = hex;\n    // },\n    AesCrypt() {\n      this.box2 = CryptoJS.AES.encrypt(this.box1, 'secret key 123').toString();\n    },\n\n    AesEncrypt() {\n      var hex = this.box1;\n\n      for (var i = 0; i < str.length; i++) {\n        hex += str.charCodeAt(i).toString(16);\n      }\n\n      this.box2 = hex;\n    },\n\n    test() {\n      let theText = this.box1;\n      this.box2 = sha256(theText);\n    }\n\n  }\n};","map":{"version":3,"mappings":"AA6DA;AACA;AACA;AAEA;EACAA,0BADA;;EAEAC;IACA;MACAC,UADA;MAEAC;IAFA;EAIA,CAPA;;EAQAC;IACAC;EADA,CARA;EAWAC;IACA;IACAC;MACA;MACA;MACA;MACA;MACA;;MACA;QACA;QACAC;QACAC;MACA;;MACA;QACAC;MACA;;MACA;IACA,CAjBA;;IAmBA;IACAC;MACA;MACA;MACA;MACA;MACA;;MACA;QACAH;QACAC;MACA;;MACA;QACAC;MACA;;MACA;IACA,CAlCA;;IAqCA;IACAE;MACA,wBADA,CAEA;;MACA;QACA;MACA;;MACA;MACA;MACAC;MAEAC,uFAVA,CAYA;;MACA;QACAC;QACAD,SAFA,CAGA;;QACA;UACAA;QACA;;QACAE;QACAA;MACA,CAtBA,CAwBA;MACA;;;MACAN;;MACA;QACAO;QACAC;QACAR;MACA;;MACA;IACA,CAvEA;;IAyEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACAS;MACA;IACA,CA5FA;;IA6FAC;MACA;;MACA;QACAC;MACA;;MACA;IACA,CAnGA;;IAqGAC;MACA;MACA;IACA;;EAxGA;AAXA","names":["name","data","box1","box2","props","msg","methods","CezarEncrypt","Temp","Temp2","output","CezarunEncrypt","VernamCrypt","input","key","alert","console","inp","k","AesCrypt","AesEncrypt","hex","test"],"sourceRoot":"src/components","sources":["Encrypter.vue"],"sourcesContent":["<template>\n  <form name=\"encform\" onsubmit=\"return false;\">\n    <div class=\"main\">\n\n      <label for=\"exampleFormControlTextarea1\"\n             class=\"form-label\">\n        Исходные данные</label>\n      <textarea name=\"box1\"\n                v-model=\"box1\"\n                class=\"form-control\"\n                id=\"exampleFormControlTextarea1\"\n                placeholder=\"Введите текст для зашифровки/расшифровки...\"\n                rows=\"3\"></textarea>\n\n      <p>\n        <button class=\"btn btn-primary\"\n                @click=\"test()\">\n          Test\n        </button>\n\n        <button class=\"btn btn-primary\"\n                @click=\"VernamCrypt()\">\n          Шифр Вернама\n        </button>\n\n        <button class=\"btn btn-primary\"\n                @click=\"CezarEncrypt()\">\n          Шифр Цезаря\n        </button>\n\n        <button class=\"btn btn-primary\"\n                @click=\"AesCrypt()\">\n          AES\n        </button>\n        <!--        <button class=\"btn btn-primary\" onClick=\"this.form.box2.value=AesCrypt(this.form.box1.value);\">AES</button>-->\n      </p>\n\n      <label for=\"exampleFormControlTextarea2\"\n             class=\"form-label\">\n        Результат программы</label>\n      <textarea name=\"box2\"\n                class=\"form-control\"\n                v-model=\"box2\"\n                id=\"exampleFormControlTextarea2\"\n                rows=\"3\"\n                placeholder=\"Данные после шифрации/дешифрации\"></textarea>\n      <p>\n        <button class=\"btn btn-primary\"\n                @click=\"CezarunEncrypt()\">\n          Расшифровать шифр Цезаря\n        </button>\n        <button class=\"btn btn-primary\"\n                @click=\"AesEncrypt()\">\n          Расшифровать AES\n        </button>\n      </p>\n    </div>\n  </form>\n</template>\n\n<script>\nimport sha256 from 'crypto-js/sha256';\nimport hmacSHA512 from 'crypto-js/hmac-sha512';\nimport Base64 from 'crypto-js/enc-base64';\n\nexport default {\n  name: 'EncrypterFunctions',\n  data() {\n    return {\n      box1: null,\n      box2: null\n    }\n  },\n  props: {\n    msg: String\n  },\n  methods: {\n         //worked\n       CezarEncrypt() {\n         let theText = this.box1\n         let output  = new String;\n         let Temp    = new Array();\n         let Temp2   = new Array();\n         let TextSize = theText.length;\n        for (let i = 0; i < TextSize; i++) {\n          let rnd = Math.round(Math.random() * 122) + 68;\n          Temp[i] = theText.charCodeAt(i) + rnd;\n          Temp2[i] = rnd;\n        }\n        for (let i = 0; i < TextSize; i++) {\n          output += String.fromCharCode(Temp[i], Temp2[i]);\n        }\n        this.box2 = output;\n      },\n\n        //worked\n       CezarunEncrypt() {\n        let theText = this.box2\n        let output  = new String;\n        let Temp    = new Array();\n        let Temp2   = new Array();\n        let TextSize = theText.length;\n        for (let i = 0; i < TextSize; i++) {\n          Temp[i] = theText.charCodeAt(i);\n          Temp2[i] = theText.charCodeAt(i + 1);\n        }\n        for (let i = 0; i < TextSize; i = i+2) {\n          output += String.fromCharCode(Temp[i] - Temp2[i]);\n        }\n        this.box2 = output;\n      },\n\n\n      //worked\n       VernamCrypt() {\n         var theText = this.box1\n        // генератор случайных чисел в заданном диапазоне\n        function getRandomInt(min, max) {\n          return Math.floor(Math.random() * (max - min)) + min;\n        }\n        var input, output, key;\n        var inp, k;\n        input = theText\n\n        key = prompt(\"Введите ключ и запишите его - он потребуется для расшифровки сообщения\");\n\n        // если длина ключа меньше длины сообщения — говорим пользователю и генерируем свой ключ\n        if ((key.length) < (input.length)) {\n          alert(\"Ключ короче сообщения, это небезопасно. Скопируйте новый сгенерированный ключ из консоли браузера.\");\n          key = \"\";\n          // генерируем новый ключ такой же длины, как и сообщение\n          for (var i = 0; i < input.length; i++) {\n            key += String.fromCharCode(getRandomInt(0, 66535));\n          }\n          console.log(\"Скопируйте новый ключ ↓\");\n          console.log(key);\n        }\n\n        // чтобы расшифровать сообщение\n        // шифруем сообщение\n        output = \"\";\n        for (i = 0; i < input.length; i++) {\n          inp = input.charCodeAt(i);\n          k = key.charCodeAt(i);\n          output += String.fromCharCode(inp ^ k);\n        }\n        this.box2 = output;\n      },\n\n      //not worked\n      // AesCrypt() {\n      //   var theText = this.box1\n      //   var hex = theText.toString();\n      //   var str = '';\n      //   for (var i = 0; i < hex.length; i += 2)\n      //     str += String.fromCharCode(parseInt(hex.substr(i, 2), 16));\n      //   this.box2 = str;\n      // },\n      //\n      // AesEncrypt() {\n      //   var hex = this.box1;\n      //   for(var i = 0; i < str.length; i++) {\n      //     hex += str.charCodeAt(i).toString(16);\n      //   }\n      //   this.box2 = hex;\n      // },\n      AesCrypt() {\n        this.box2 = CryptoJS.AES.encrypt(this.box1, 'secret key 123').toString();\n      },\n      AesEncrypt() {\n        var hex = this.box1;\n        for(var i = 0; i < str.length; i++) {\n          hex += str.charCodeAt(i).toString(16);\n        }\n        this.box2 = hex;\n      },\n\n      test() {\n         let theText = this.box1\n         this.box2 = sha256(theText)\n      }\n}\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped lang=\"scss\">\n</style>\n"]},"metadata":{},"sourceType":"module"}